AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloud Formation template to spin up a multi-az VPC build with public facing bastions"
Parameters:
  VPCName:
    Type: "String"
    Description: "What would you like to name the VPC?"
  VPCIpRange:
    Type: "String"
    Description: "Please provide the CIDR range to be used by the new VPC"
  PrivSubnet1Name:
    Type: "String"
    Description: "Please provide a name for Private Subnet #1"
  PrivSubnet1CIDR:
    Type: "String"
    Description: "Please provide the CIDR range to be used by Private Subnet #1"
  PubSubnet1Name:
    Type: "String"
    Description: "Please provide a name for Public Subnet #1"
  PubSubnet1CIDR:
    Type: "String"
    Description: "Please provide the CIDR range to be used by Public Subnet #1"
  PrivSubnet2Name:
    Type: "String"
    Description: "Please provide a name for Private Subnet #2"
  PrivSubnet2CIDR:
    Type: "String"
    Description: "Please provide the CIDR range to be used by Private Subnet #2"
  PubSubnet2Name:
    Type: "String"
    Description: "Please provide a name for Public Subnet #2"
  PubSubnet2CIDR:
    Type: "String"
    Description: "Please provide the CIDR range to be used by Public Subnet #2"
  InstanceAMI:
    Type: "String"
    Description: "Please provide the instance AMI to be used"
  SecurityGroupAllowRange:
    Type: "String"
    Description: "Please provide a CIDR to allow inbound access towards the public bastions"
  BastionOSType:
    Type: "String"
    Description: "Do you want the public bastion to be of OS Windows or Linux?"
    AllowedValues: ["Windows", "Linux"]
  KeyPairForBastion:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Please select a keypair to use for the bastion"
Conditions:
  WindowsBastionCondition:
    Fn::Equals:
      - Ref: "BastionOSType"
      - "Windows"
  LinuxBastionCondition:
    Fn::Equals:
      - Ref: "BastionOSType"
      - "Linux"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock:
        Ref: "VPCIpRange"
      EnableDnsHostnames: "True"
      EnableDnsSupport: "True"
      Tags:
        - Key: "Name"
          Value:
            Ref: "VPCName"
  Subnet1Private:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock:
        Ref: "PrivSubnet1CIDR"
      VpcId:
        Ref: "VPC"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: "Name"
          Value:
            Ref: "PrivSubnet1Name"
  Subnet1Public:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: "True"
      CidrBlock:
        Ref: "PubSubnet1CIDR"
      VpcId:
        Ref: "VPC"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: "Name"
          Value:
            Ref: "PubSubnet1Name"
  Subnet2Private:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock:
        Ref: "PrivSubnet2CIDR"
      VpcId:
        Ref: "VPC"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: "Name"
          Value:
            Ref: "PrivSubnet2Name"
  Subnet2Public:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: "True"
      CidrBlock:
        Ref: "PubSubnet2CIDR"
      VpcId:
        Ref: "VPC"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: "Name"
          Value:
            Ref: "PubSubnet2Name"
  IGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - Ref: "VPCName"
              - "-IGW"
  IGWAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn: "IGW"
    Properties:
      InternetGatewayId:
        Ref: "IGW"
      VpcId:
        Ref: "VPC"
  IGWRouteToInternet:
    Type: "AWS::EC2::Route"
    DependsOn: "IGWAttachment"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "IGW"
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Join
            - "-"
            - - Ref: "VPCName"
              - "PrivateRouteTable"
      VpcId:
        Ref: "VPC"
  PrivateRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable"
      SubnetId:
        Ref: "Subnet1Private"
  PrivateRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable"
      SubnetId:
        Ref: "Subnet2Private"
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Join
            - "-"
            - - Ref: "VPCName"
              - "PublicRouteTable"
      VpcId:
        Ref: "VPC"
  PublicRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      SubnetId:
        Ref: "Subnet1Public"
  PublicRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      SubnetId:
        Ref: "Subnet2Public"
  LinuxInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Condition: "LinuxBastionCondition"
    DependsOn: "VPC"
    Properties:
      GroupName: "BastionSecurityGroup"
      GroupDescription: "Allow SSH inbound"
      VpcId:
        Ref: "VPC"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: "SecurityGroupAllowRange"
  WindowsInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Condition: "WindowsBastionCondition"
    DependsOn: "VPC"
    Properties:
      GroupName: "BastionSecurityGroup"
      GroupDescription: "Allow RDP inbound"
      VpcId:
        Ref: "VPC"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3389
          ToPort: 3389
          CidrIp:
            Ref: "SecurityGroupAllowRange"
  LaunchTemplateLinux:
    Type: "AWS::EC2::LaunchTemplate"
    Condition: "LinuxBastionCondition"
    Properties:
      LaunchTemplateName: "LinuxBastionLaunchTemplate"
      LaunchTemplateData:
        InstanceType: "t2.micro"
        ImageId:
          Ref: "InstanceAMI"
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: "20"
        KeyName:
          Ref: "KeyPairForBastion"
        SecurityGroupIds:
          - Fn::GetAtt:
              - "LinuxInstanceSecurityGroup"
              - "GroupId"
  AutoScalingGroupLinux:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Condition: "LinuxBastionCondition"
    Properties:
      AutoScalingGroupName: "AutoScalingGroupLinux"
      AvailabilityZones:
        - "us-east-1a"
        - "us-east-1b"
      LaunchTemplate:
        LaunchTemplateId:
          Ref: "LaunchTemplateLinux"
        Version: "1"
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "2"
      VPCZoneIdentifier:
        - Ref: "Subnet1Public"
        - Ref: "Subnet2Public"
  LaunchTemplateWindows:
    Type: "AWS::EC2::LaunchTemplate"
    Condition: "WindowsBastionCondition"
    Properties:
      LaunchTemplateName: "WindowsBastionLaunchTemplate"
      LaunchTemplateData:
        InstanceType: "t2.micro"
        ImageId:
          Ref: "InstanceAMI"
        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: "30"
        KeyName:
          Ref: "KeyPairForBastion"
        SecurityGroupIds:
          - Fn::GetAtt:
              - "WindowsInstanceSecurityGroup"
              - "GroupId"
  AutoScalingGroupWindows:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Condition: "WindowsBastionCondition"
    Properties:
      AutoScalingGroupName: "AutoScalingGroupWindows"
      AvailabilityZones:
        - "us-east-1a"
        - "us-east-1b"
      LaunchTemplate:
        LaunchTemplateId:
          Ref: "LaunchTemplateWindows"
        Version: "1"
      MinSize: "2"
      MaxSize: "2"
      DesiredCapacity: "2"
      VPCZoneIdentifier:
        - Ref: "Subnet1Public"
        - Ref: "Subnet2Public"